{"message":"attempt to use a non-constant value in a constant","code":{"code":"E0435","explanation":"A non-constant value was used in a constant expression.\n\nErroneous code example:\n\n```compile_fail,E0435\nlet foo = 42;\nlet a: [u8; foo]; // error: attempt to use a non-constant value in a constant\n```\n\n'constant' means 'a compile-time value'.\n\nMore details can be found in the [Variables and Mutability] section of the book.\n\n[Variables and Mutability]: https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n\nTo fix this error, please replace the value with a constant. Example:\n\n```\nlet a: [u8; 42]; // ok!\n```\n\nOr:\n\n```\nconst FOO: usize = 42;\nlet a: [u8; FOO]; // ok!\n```\n"},"level":"error","spans":[{"file_name":"rusty_editor\\src\\panels\\content_browser_panel.rs","byte_start":2441,"byte_end":2445,"line_start":66,"line_end":66,"column_start":73,"column_end":77,"is_primary":true,"text":[{"text":"                    let f: &'static str = const_format::formatcp!(\"{}\", path.to_str().unwrap());","highlight_start":73,"highlight_end":77}],"label":"non-constant value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `let` instead of `const`","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\nikin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\const_format-0.2.22\\src\\macros\\fmt_macros.rs","byte_start":6742,"byte_end":7351,"line_start":245,"line_end":265,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"///     const CHARS: &str = formatcp!(\"{0:?} - {0} - {1} - {1:?}\", '\"', 'ðŸ‘€');","highlight_start":10,"highlight_end":78},{"text":"///    ","highlight_start":1,"highlight_end":8},{"text":"///     assert_eq!(CHARS, r#\"'\\\"' - \" - ðŸ‘€ - 'ðŸ‘€'\"#);","highlight_start":1,"highlight_end":52},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// [`format`]: https://doc.rust-lang.org/std/macro.format.html","highlight_start":1,"highlight_end":64},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// [`format_args_implicits` RFC]:","highlight_start":1,"highlight_end":35},{"text":"/// https://github.com/rust-lang/rfcs/blob/master/text/2795-format-args-implicit-identifiers.md","highlight_start":1,"highlight_end":96},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[macro_export]","highlight_start":1,"highlight_end":16},{"text":"macro_rules! formatcp {","highlight_start":1,"highlight_end":24},{"text":"    ($format_string:expr $( $(, $expr:expr )+ )? $(,)? ) => ({","highlight_start":1,"highlight_end":63},{"text":"        use $crate::__cf_osRcTFl4A;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::pmr::__formatcp_impl!(","highlight_start":1,"highlight_end":39},{"text":"            ($format_string)","highlight_start":1,"highlight_end":29},{"text":"            $(, $($expr,)+)?","highlight_start":1,"highlight_end":29},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"let CONCATP_NHPMWYD3NJA","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"C:\\Users\\nikin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\const_format-0.2.22\\src\\macros\\fmt_macros.rs","byte_start":7253,"byte_end":7351,"line_start":262,"line_end":265,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::pmr::__formatcp_impl!(","highlight_start":9,"highlight_end":39},{"text":"            ($format_string)","highlight_start":1,"highlight_end":29},{"text":"            $(, $($expr,)+)?","highlight_start":1,"highlight_end":29},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"rusty_editor\\src\\panels\\content_browser_panel.rs","byte_start":2411,"byte_end":2464,"line_start":66,"line_end":66,"column_start":43,"column_end":96,"is_primary":false,"text":[{"text":"                    let f: &'static str = const_format::formatcp!(\"{}\", path.to_str().unwrap());","highlight_start":43,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"const_format::formatcp!","def_site_span":{"file_name":"C:\\Users\\nikin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\const_format-0.2.22\\src\\macros\\fmt_macros.rs","byte_start":7121,"byte_end":7361,"line_start":258,"line_end":267,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! formatcp {","highlight_start":1,"highlight_end":24},{"text":"    ($format_string:expr $( $(, $expr:expr )+ )? $(,)? ) => ({","highlight_start":1,"highlight_end":63},{"text":"        use $crate::__cf_osRcTFl4A;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::pmr::__formatcp_impl!(","highlight_start":1,"highlight_end":39},{"text":"            ($format_string)","highlight_start":1,"highlight_end":29},{"text":"            $(, $($expr,)+)?","highlight_start":1,"highlight_end":29},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::pmr::__formatcp_impl!","def_site_span":{"file_name":"C:\\Users\\nikin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\const_format_proc_macros-0.2.22\\src\\lib.rs","byte_start":1333,"byte_end":1392,"line_start":69,"line_end":69,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn __formatcp_impl(input: TokenStream1) -> TokenStream1 {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0435]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attempt to use a non-constant value in a constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mrusty_editor\\src\\panels\\content_browser_panel.rs:66:73\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    let f: &'static str = const_format::formatcp!(\"{}\", path.to_str().unwrap());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnon-constant value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: consider using `let` instead of `const`: `let CONCATP_NHPMWYD3NJA`\u001b[0m\n\n"}
{"message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"rusty_editor\\src\\panels\\content_browser_panel.rs","byte_start":2441,"byte_end":2445,"line_start":66,"line_end":66,"column_start":73,"column_end":77,"is_primary":true,"text":[{"text":"                    let f: &'static str = const_format::formatcp!(\"{}\", path.to_str().unwrap());","highlight_start":73,"highlight_end":77}],"label":"multiple `to_pargument_display` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in an impl for the type `PConvWrapper<PArgument>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl for the type `PConvWrapper<bool>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"candidate #3 is defined in an impl for the type `PConvWrapper<char>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"candidate #4 is defined in an impl for the type `PConvWrapper<&'static str>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"and 12 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mrusty_editor\\src\\panels\\content_browser_panel.rs:66:73\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    let f: &'static str = const_format::formatcp!(\"{}\", path.to_str().unwrap());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `to_pargument_display` found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl for the type `PConvWrapper<PArgument>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl for the type `PConvWrapper<bool>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: candidate #3 is defined in an impl for the type `PConvWrapper<char>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: candidate #4 is defined in an impl for the type `PConvWrapper<&'static str>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: and 12 others\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0034, E0435.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0034, E0435.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0034`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0034`.\u001b[0m\n"}
