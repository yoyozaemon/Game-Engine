#![allow(non_snake_case)]

use super::event::*;

// ------------------------------------------------------------ Window Resized Event ------------------------------------------------------------- //
pub struct WindowResizedEvent
{
    m_Width:   u32,
    m_Height:  u32,
}

impl Event for WindowResizedEvent
{
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetType(&self) -> EventType
    {
        return EventType::WindowResized;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetName(&self) -> &str
    {
        return "WindowResized";
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetCategoryFlags(&self) -> EventCategory
    {
        return EventCategory::APPLICATION;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn AsAny(&self) -> &dyn std::any::Any
    {
        return self;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn ToString(&self) -> String
    {
        return format!("{}: width = {:?}, height = {:?}", self.GetName(), self.GetWidth(), self.GetHeight());
    }
}

impl WindowResizedEvent
{
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    pub fn Create(width: u32, height: u32) -> WindowResizedEvent
    {
        return WindowResizedEvent{ m_Width: width, m_Height: height };
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    pub fn GetWidth(&self) -> u32
    {
        return self.m_Width;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    pub fn GetHeight(&self) -> u32
    {
        return self.m_Height;
    }
}

// ------------------------------------------------------------ Window Closed Event ------------------------------------------------------------- //
pub struct WindowClosedEvent
{
}

impl Event for WindowClosedEvent
{
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetType(&self) -> EventType
    {
        return EventType::WindowClosed;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetName(&self) -> &str
    {
        return "WindowClosed";
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn GetCategoryFlags(&self) -> EventCategory
    {
        return EventCategory::APPLICATION;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn AsAny(&self) -> &dyn std::any::Any
    {
        return self;
    }

    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    fn ToString(&self) -> String
    {
        return format!("{}:", self.GetName());
    }
}

impl WindowClosedEvent
{
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    pub fn Create() -> WindowClosedEvent
    {
        return WindowClosedEvent{ };
    }
}